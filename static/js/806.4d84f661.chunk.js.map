{"version":3,"file":"static/js/806.4d84f661.chunk.js","mappings":"+SAEMA,EAAW,6BACXC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,yCACuBC,IAFf,uBACvBG,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,qDAOjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,mCACiBC,EADjB,iCACiDK,EADjD,gCADM,uBACrBF,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfG,EAAa,mCAAG,WAAMC,GAAN,yFACJL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACEQ,EADF,oBACqBP,EADrB,oBADI,uBACnBG,EADmB,EACnBA,KADmB,kBAIpBA,GAJoB,2CAAH,sDAObK,EAAY,mCAAG,WAAMD,GAAN,yFACHL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACEQ,EADF,4BAC6BP,EAD7B,oBADG,uBAClBG,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDAQZM,EAAe,mCAAG,WAAMF,GAAN,yFACNL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACEQ,EADF,6BAC8BP,EAD9B,2BADM,uBACrBG,EADqB,EACrBA,KADqB,kBAKtBA,GALsB,2CAAH,qD,4EChCfO,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,OAAO,MACPC,MAAM,MACNC,OAAO,IACPC,MAAM,QACNC,UAAU,qBACVC,aAAc,CAAEC,eAAgB,UAChCC,iBAAiB,GACjBC,SAAS,GAGd,C,qKCbYC,EAAYC,EAAAA,GAAAA,EAAH,8CAITC,EAAOD,EAAAA,GAAAA,GAAH,qI,SCyCjB,EAzCgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQlB,GAAYmB,EAAAA,EAAAA,MAAZnB,QACR,GAAgCgB,EAAAA,EAAAA,WAAS,GAAzC,eAAOI,EAAP,KAAiBC,EAAjB,KACA,GAA8CL,EAAAA,EAAAA,WAAS,GAAvD,eAAOM,EAAP,KAAwBC,EAAxB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACRH,GAAY,GACZ,IAAMI,EAAiB,mCAAG,WAAMzB,GAAN,mGAEIE,EAAAA,EAAAA,IAAgBF,GAFpB,gBAEd0B,EAFc,EAEdA,QACRR,EAAWQ,GAHW,gDAKtBC,QAAQC,IAAI,KAAMC,SALI,yBAOtBR,GAAY,GACZE,GAAmB,GARG,4EAAH,sDAWvBE,EAAkBzB,EACnB,GAAE,CAACA,KAGF,gCACGoB,IAAY,SAACjB,EAAA,EAAD,IACZmB,GAAsC,IAAnBL,EAAQa,QAC1B,SAACjB,EAAD,wDAEA,SAACE,EAAD,UACGE,EAAQc,KAAI,SAAAC,GAAM,OACjB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOG,GADC,QAU5B,C","sources":["api/api.js","components/Loader/Loader.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org';\nconst API_KEY = 'b13a09f684c7fe23fb2f1a323ef19ea8';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/trending/movie/day?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const getMoviesByName = async query => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return data;\n};\n\nexport const getMoviesById = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return data;\n};\n","import { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <ThreeDots\n      height=\"120\"\n      width=\"120\"\n      radius=\"9\"\n      color=\"green\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{ justifyContent: 'center' }}\n      wrapperClassName=\"\"\n      visible={true}\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const NoReviews = styled.p`\n  margin-left: 40px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  /* justify-content: center; */\n  margin: 0px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMovieReviews } from 'api/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { NoReviews, List } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  const [isLoader, setIsLoader] = useState(false);\n  const [isContentLoaded, setIsContentLoaded] = useState(false);\n\n  useEffect(() => {\n    setIsLoader(true);\n    const fetchMovieReviews = async movieId => {\n      try {\n        const { results } = await getMovieReviews(movieId);\n        setReviews(results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoader(false);\n        setIsContentLoaded(true);\n      }\n    };\n    fetchMovieReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoader && <Loader />}\n      {isContentLoaded && reviews.length === 0 ? (\n        <NoReviews>Sorry, there is no review for this movie</NoReviews>\n      ) : (\n        <List>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <h3>Author: {review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["BASE_URL","API_KEY","getTrendingMovies","axios","data","getMoviesByName","query","getMoviesById","movieId","getMovieCast","getMovieReviews","Loader","height","width","radius","color","ariaLabel","wrapperStyle","justifyContent","wrapperClassName","visible","NoReviews","styled","List","useState","reviews","setReviews","useParams","isLoader","setIsLoader","isContentLoaded","setIsContentLoaded","useEffect","fetchMovieReviews","results","console","log","message","length","map","review","author","content","id"],"sourceRoot":""}